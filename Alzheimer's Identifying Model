{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":10618775,"sourceType":"datasetVersion","datasetId":6574594}],"dockerImageVersionId":30918,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:35.530173Z","iopub.execute_input":"2025-04-21T15:05:35.530634Z","iopub.status.idle":"2025-04-21T15:05:35.978046Z","shell.execute_reply.started":"2025-04-21T15:05:35.530602Z","shell.execute_reply":"2025-04-21T15:05:35.976852Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/alzheimers-prediction-dataset-global/alzheimers_prediction_dataset.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"code","source":"datos = pd.read_csv(\"/kaggle/input/alzheimers-prediction-dataset-global/alzheimers_prediction_dataset.csv\")\nprint(datos.head())\nprint(datos.info())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:35.979535Z","iopub.execute_input":"2025-04-21T15:05:35.980134Z","iopub.status.idle":"2025-04-21T15:05:36.606831Z","shell.execute_reply.started":"2025-04-21T15:05:35.980094Z","shell.execute_reply":"2025-04-21T15:05:36.605432Z"}},"outputs":[{"name":"stdout","text":"        Country  Age  Gender  Education Level   BMI Physical Activity Level  \\\n0         Spain   90    Male                1  33.0                  Medium   \n1     Argentina   72    Male                7  29.9                  Medium   \n2  South Africa   86  Female               19  22.9                    High   \n3         China   53    Male               17  31.2                     Low   \n4        Sweden   58  Female                3  30.0                    High   \n\n  Smoking Status Alcohol Consumption Diabetes Hypertension  ...  \\\n0          Never        Occasionally       No           No  ...   \n1         Former               Never       No           No  ...   \n2        Current        Occasionally       No          Yes  ...   \n3          Never           Regularly      Yes           No  ...   \n4         Former               Never      Yes           No  ...   \n\n  Dietary Habits Air Pollution Exposure  Employment Status Marital Status  \\\n0        Healthy                   High            Retired         Single   \n1        Healthy                 Medium         Unemployed        Widowed   \n2        Average                 Medium           Employed         Single   \n3        Healthy                 Medium            Retired         Single   \n4      Unhealthy                   High           Employed        Married   \n\n  Genetic Risk Factor (APOE-ε4 allele) Social Engagement Level Income Level  \\\n0                                   No                     Low       Medium   \n1                                   No                    High          Low   \n2                                   No                     Low       Medium   \n3                                   No                    High       Medium   \n4                                   No                     Low       Medium   \n\n  Stress Levels Urban vs Rural Living Alzheimer’s Diagnosis  \n0          High                 Urban                    No  \n1          High                 Urban                    No  \n2          High                 Rural                    No  \n3           Low                 Rural                    No  \n4          High                 Rural                    No  \n\n[5 rows x 25 columns]\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 74283 entries, 0 to 74282\nData columns (total 25 columns):\n #   Column                                Non-Null Count  Dtype  \n---  ------                                --------------  -----  \n 0   Country                               74283 non-null  object \n 1   Age                                   74283 non-null  int64  \n 2   Gender                                74283 non-null  object \n 3   Education Level                       74283 non-null  int64  \n 4   BMI                                   74283 non-null  float64\n 5   Physical Activity Level               74283 non-null  object \n 6   Smoking Status                        74283 non-null  object \n 7   Alcohol Consumption                   74283 non-null  object \n 8   Diabetes                              74283 non-null  object \n 9   Hypertension                          74283 non-null  object \n 10  Cholesterol Level                     74283 non-null  object \n 11  Family History of Alzheimer’s         74283 non-null  object \n 12  Cognitive Test Score                  74283 non-null  int64  \n 13  Depression Level                      74283 non-null  object \n 14  Sleep Quality                         74283 non-null  object \n 15  Dietary Habits                        74283 non-null  object \n 16  Air Pollution Exposure                74283 non-null  object \n 17  Employment Status                     74283 non-null  object \n 18  Marital Status                        74283 non-null  object \n 19  Genetic Risk Factor (APOE-ε4 allele)  74283 non-null  object \n 20  Social Engagement Level               74283 non-null  object \n 21  Income Level                          74283 non-null  object \n 22  Stress Levels                         74283 non-null  object \n 23  Urban vs Rural Living                 74283 non-null  object \n 24  Alzheimer’s Diagnosis                 74283 non-null  object \ndtypes: float64(1), int64(3), object(21)\nmemory usage: 14.2+ MB\nNone\n","output_type":"stream"}],"execution_count":3},{"cell_type":"markdown","source":"# Columnas no numéricas","metadata":{}},{"cell_type":"markdown","source":"## Country","metadata":{}},{"cell_type":"code","source":"print(datos[\"Country\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.609226Z","iopub.execute_input":"2025-04-21T15:05:36.609597Z","iopub.status.idle":"2025-04-21T15:05:36.619886Z","shell.execute_reply.started":"2025-04-21T15:05:36.609568Z","shell.execute_reply":"2025-04-21T15:05:36.618514Z"}},"outputs":[{"name":"stdout","text":"['Spain' 'Argentina' 'South Africa' 'China' 'Sweden' 'South Korea'\n 'Germany' 'UK' 'Canada' 'India' 'Italy' 'USA' 'Russia' 'Japan'\n 'Australia' 'France' 'Norway' 'Saudi Arabia' 'Mexico' 'Brazil']\n","output_type":"stream"}],"execution_count":4},{"cell_type":"code","source":"datos = pd.get_dummies(datos, columns=['Country'], drop_first=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.621912Z","iopub.execute_input":"2025-04-21T15:05:36.622365Z","iopub.status.idle":"2025-04-21T15:05:36.680537Z","shell.execute_reply.started":"2025-04-21T15:05:36.622318Z","shell.execute_reply":"2025-04-21T15:05:36.679234Z"}},"outputs":[],"execution_count":5},{"cell_type":"markdown","source":"## Gender","metadata":{}},{"cell_type":"code","source":"print(datos[\"Gender\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.681742Z","iopub.execute_input":"2025-04-21T15:05:36.682357Z","iopub.status.idle":"2025-04-21T15:05:36.693166Z","shell.execute_reply.started":"2025-04-21T15:05:36.682108Z","shell.execute_reply":"2025-04-21T15:05:36.691877Z"}},"outputs":[{"name":"stdout","text":"['Male' 'Female']\n","output_type":"stream"}],"execution_count":6},{"cell_type":"code","source":"datos[\"Gender\"] = datos[\"Gender\"].replace({\"Male\" : \"0\", \"Female\" : \"1\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.694431Z","iopub.execute_input":"2025-04-21T15:05:36.694809Z","iopub.status.idle":"2025-04-21T15:05:36.723623Z","shell.execute_reply.started":"2025-04-21T15:05:36.694760Z","shell.execute_reply":"2025-04-21T15:05:36.722632Z"}},"outputs":[],"execution_count":7},{"cell_type":"markdown","source":"## Physical Activity Level","metadata":{}},{"cell_type":"code","source":"print(datos[\"Physical Activity Level\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.724789Z","iopub.execute_input":"2025-04-21T15:05:36.725162Z","iopub.status.idle":"2025-04-21T15:05:36.738485Z","shell.execute_reply.started":"2025-04-21T15:05:36.725126Z","shell.execute_reply":"2025-04-21T15:05:36.737226Z"}},"outputs":[{"name":"stdout","text":"['Medium' 'High' 'Low']\n","output_type":"stream"}],"execution_count":8},{"cell_type":"code","source":"datos[\"Physical Activity Level\"] = datos[\"Physical Activity Level\"].replace({\"Low\" : \"0\", \"Medium\" : \"1\", \"High\" : \"2\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.739555Z","iopub.execute_input":"2025-04-21T15:05:36.739909Z","iopub.status.idle":"2025-04-21T15:05:36.771356Z","shell.execute_reply.started":"2025-04-21T15:05:36.739881Z","shell.execute_reply":"2025-04-21T15:05:36.770070Z"}},"outputs":[],"execution_count":9},{"cell_type":"markdown","source":"## Smoking Status","metadata":{}},{"cell_type":"code","source":"print(datos[\"Smoking Status\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.775335Z","iopub.execute_input":"2025-04-21T15:05:36.775652Z","iopub.status.idle":"2025-04-21T15:05:36.785570Z","shell.execute_reply.started":"2025-04-21T15:05:36.775624Z","shell.execute_reply":"2025-04-21T15:05:36.784506Z"}},"outputs":[{"name":"stdout","text":"['Never' 'Former' 'Current']\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"datos = pd.get_dummies(datos, columns=['Smoking Status'], drop_first=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.787690Z","iopub.execute_input":"2025-04-21T15:05:36.787964Z","iopub.status.idle":"2025-04-21T15:05:36.896669Z","shell.execute_reply.started":"2025-04-21T15:05:36.787937Z","shell.execute_reply":"2025-04-21T15:05:36.895662Z"}},"outputs":[],"execution_count":11},{"cell_type":"markdown","source":"## Alcohol Consumption","metadata":{}},{"cell_type":"code","source":"print(datos[\"Alcohol Consumption\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.897832Z","iopub.execute_input":"2025-04-21T15:05:36.898366Z","iopub.status.idle":"2025-04-21T15:05:36.908625Z","shell.execute_reply.started":"2025-04-21T15:05:36.898260Z","shell.execute_reply":"2025-04-21T15:05:36.907556Z"}},"outputs":[{"name":"stdout","text":"['Occasionally' 'Never' 'Regularly']\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"datos[\"Alcohol Consumption\"] = datos[\"Alcohol Consumption\"].replace({\"Never\" : \"0\", \"Occasionally\" : \"1\", \"Regularly\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.909826Z","iopub.execute_input":"2025-04-21T15:05:36.910235Z","iopub.status.idle":"2025-04-21T15:05:36.940825Z","shell.execute_reply.started":"2025-04-21T15:05:36.910195Z","shell.execute_reply":"2025-04-21T15:05:36.939586Z"}},"outputs":[],"execution_count":13},{"cell_type":"markdown","source":"## Diabetes","metadata":{}},{"cell_type":"code","source":"print(datos[\"Diabetes\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.941983Z","iopub.execute_input":"2025-04-21T15:05:36.942311Z","iopub.status.idle":"2025-04-21T15:05:36.952828Z","shell.execute_reply.started":"2025-04-21T15:05:36.942253Z","shell.execute_reply":"2025-04-21T15:05:36.951737Z"}},"outputs":[{"name":"stdout","text":"['No' 'Yes']\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"datos[\"Diabetes\"] = datos[\"Diabetes\"].replace({\"No\" : \"0\", \"Yes\" : \"1\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.954350Z","iopub.execute_input":"2025-04-21T15:05:36.954747Z","iopub.status.idle":"2025-04-21T15:05:36.985493Z","shell.execute_reply.started":"2025-04-21T15:05:36.954708Z","shell.execute_reply":"2025-04-21T15:05:36.984444Z"}},"outputs":[],"execution_count":15},{"cell_type":"markdown","source":"## Hypertension","metadata":{}},{"cell_type":"code","source":"print(datos[\"Hypertension\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:36.986785Z","iopub.execute_input":"2025-04-21T15:05:36.987065Z","iopub.status.idle":"2025-04-21T15:05:36.999677Z","shell.execute_reply.started":"2025-04-21T15:05:36.987042Z","shell.execute_reply":"2025-04-21T15:05:36.998463Z"}},"outputs":[{"name":"stdout","text":"['No' 'Yes']\n","output_type":"stream"}],"execution_count":16},{"cell_type":"code","source":"datos[\"Hypertension\"] = datos[\"Hypertension\"].replace({\"No\" : \"0\", \"Yes\" : \"1\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.001064Z","iopub.execute_input":"2025-04-21T15:05:37.001485Z","iopub.status.idle":"2025-04-21T15:05:37.033971Z","shell.execute_reply.started":"2025-04-21T15:05:37.001426Z","shell.execute_reply":"2025-04-21T15:05:37.032755Z"}},"outputs":[],"execution_count":17},{"cell_type":"markdown","source":"## Cholesterol Level","metadata":{}},{"cell_type":"code","source":"print(datos[\"Cholesterol Level\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.035377Z","iopub.execute_input":"2025-04-21T15:05:37.035713Z","iopub.status.idle":"2025-04-21T15:05:37.049678Z","shell.execute_reply.started":"2025-04-21T15:05:37.035685Z","shell.execute_reply":"2025-04-21T15:05:37.048384Z"}},"outputs":[{"name":"stdout","text":"['Normal' 'High']\n","output_type":"stream"}],"execution_count":18},{"cell_type":"code","source":"datos[\"Cholesterol Level\"] = datos[\"Cholesterol Level\"].replace({\"Normal\" : \"0\", \"High\" : \"1\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.050848Z","iopub.execute_input":"2025-04-21T15:05:37.051728Z","iopub.status.idle":"2025-04-21T15:05:37.085972Z","shell.execute_reply.started":"2025-04-21T15:05:37.051518Z","shell.execute_reply":"2025-04-21T15:05:37.084639Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"## Family History of Alzheimer’s","metadata":{}},{"cell_type":"code","source":"print(datos[\"Family History of Alzheimer’s\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.087202Z","iopub.execute_input":"2025-04-21T15:05:37.087714Z","iopub.status.idle":"2025-04-21T15:05:37.096800Z","shell.execute_reply.started":"2025-04-21T15:05:37.087680Z","shell.execute_reply":"2025-04-21T15:05:37.095817Z"}},"outputs":[{"name":"stdout","text":"['No' 'Yes']\n","output_type":"stream"}],"execution_count":20},{"cell_type":"code","source":"datos[\"Family History of Alzheimer’s\"] = datos[\"Family History of Alzheimer’s\"].replace({\"No\" : \"0\", \"Yes\" : \"1\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.098167Z","iopub.execute_input":"2025-04-21T15:05:37.098627Z","iopub.status.idle":"2025-04-21T15:05:37.130652Z","shell.execute_reply.started":"2025-04-21T15:05:37.098585Z","shell.execute_reply":"2025-04-21T15:05:37.129383Z"}},"outputs":[],"execution_count":21},{"cell_type":"markdown","source":"## Depression Level","metadata":{}},{"cell_type":"code","source":"print(datos[\"Depression Level\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.131689Z","iopub.execute_input":"2025-04-21T15:05:37.131987Z","iopub.status.idle":"2025-04-21T15:05:37.143438Z","shell.execute_reply.started":"2025-04-21T15:05:37.131962Z","shell.execute_reply":"2025-04-21T15:05:37.142110Z"}},"outputs":[{"name":"stdout","text":"['Low' 'High' 'Medium']\n","output_type":"stream"}],"execution_count":22},{"cell_type":"code","source":"datos[\"Depression Level\"] = datos[\"Depression Level\"].replace({\"Low\" : \"0\", \"Medium\" : \"1\", \"High\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.144563Z","iopub.execute_input":"2025-04-21T15:05:37.144991Z","iopub.status.idle":"2025-04-21T15:05:37.176669Z","shell.execute_reply.started":"2025-04-21T15:05:37.144939Z","shell.execute_reply":"2025-04-21T15:05:37.175302Z"}},"outputs":[],"execution_count":23},{"cell_type":"markdown","source":"## Sleep Quality","metadata":{}},{"cell_type":"code","source":"print(datos[\"Sleep Quality\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.177851Z","iopub.execute_input":"2025-04-21T15:05:37.178147Z","iopub.status.idle":"2025-04-21T15:05:37.187047Z","shell.execute_reply.started":"2025-04-21T15:05:37.178121Z","shell.execute_reply":"2025-04-21T15:05:37.185980Z"}},"outputs":[{"name":"stdout","text":"['Poor' 'Good' 'Average']\n","output_type":"stream"}],"execution_count":24},{"cell_type":"code","source":"datos[\"Sleep Quality\"] = datos[\"Sleep Quality\"].replace({\"Poor\" : \"0\", \"Average\" : \"1\", \"Good\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.188201Z","iopub.execute_input":"2025-04-21T15:05:37.188674Z","iopub.status.idle":"2025-04-21T15:05:37.221683Z","shell.execute_reply.started":"2025-04-21T15:05:37.188628Z","shell.execute_reply":"2025-04-21T15:05:37.220386Z"}},"outputs":[],"execution_count":25},{"cell_type":"markdown","source":"## Dietary Habits","metadata":{}},{"cell_type":"code","source":"print(datos[\"Dietary Habits\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.222709Z","iopub.execute_input":"2025-04-21T15:05:37.222973Z","iopub.status.idle":"2025-04-21T15:05:37.232484Z","shell.execute_reply.started":"2025-04-21T15:05:37.222950Z","shell.execute_reply":"2025-04-21T15:05:37.231177Z"}},"outputs":[{"name":"stdout","text":"['Healthy' 'Average' 'Unhealthy']\n","output_type":"stream"}],"execution_count":26},{"cell_type":"code","source":"datos[\"Dietary Habits\"] = datos[\"Dietary Habits\"].replace({\"Unhealthy\" : \"0\", \"Average\" : \"1\", \"Healthy\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.233603Z","iopub.execute_input":"2025-04-21T15:05:37.233874Z","iopub.status.idle":"2025-04-21T15:05:37.267496Z","shell.execute_reply.started":"2025-04-21T15:05:37.233852Z","shell.execute_reply":"2025-04-21T15:05:37.266376Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"## Air Pollution Exposure","metadata":{}},{"cell_type":"code","source":"print(datos[\"Air Pollution Exposure\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.274018Z","iopub.execute_input":"2025-04-21T15:05:37.274428Z","iopub.status.idle":"2025-04-21T15:05:37.284232Z","shell.execute_reply.started":"2025-04-21T15:05:37.274390Z","shell.execute_reply":"2025-04-21T15:05:37.283043Z"}},"outputs":[{"name":"stdout","text":"['High' 'Medium' 'Low']\n","output_type":"stream"}],"execution_count":28},{"cell_type":"code","source":"datos[\"Air Pollution Exposure\"] = datos[\"Air Pollution Exposure\"].replace({\"Low\" : \"0\", \"Medium\" : \"1\", \"High\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.287659Z","iopub.execute_input":"2025-04-21T15:05:37.287969Z","iopub.status.idle":"2025-04-21T15:05:37.318715Z","shell.execute_reply.started":"2025-04-21T15:05:37.287944Z","shell.execute_reply":"2025-04-21T15:05:37.317416Z"}},"outputs":[],"execution_count":29},{"cell_type":"markdown","source":"## Employment Status","metadata":{}},{"cell_type":"code","source":"print(datos[\"Employment Status\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.319961Z","iopub.execute_input":"2025-04-21T15:05:37.320244Z","iopub.status.idle":"2025-04-21T15:05:37.336902Z","shell.execute_reply.started":"2025-04-21T15:05:37.320221Z","shell.execute_reply":"2025-04-21T15:05:37.335714Z"}},"outputs":[{"name":"stdout","text":"['Retired' 'Unemployed' 'Employed']\n","output_type":"stream"}],"execution_count":30},{"cell_type":"code","source":"datos = pd.get_dummies(datos, columns=['Employment Status'], drop_first=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.337881Z","iopub.execute_input":"2025-04-21T15:05:37.338220Z","iopub.status.idle":"2025-04-21T15:05:37.420906Z","shell.execute_reply.started":"2025-04-21T15:05:37.338188Z","shell.execute_reply":"2025-04-21T15:05:37.419655Z"}},"outputs":[],"execution_count":31},{"cell_type":"markdown","source":"## Marital Status","metadata":{}},{"cell_type":"code","source":"print(datos[\"Marital Status\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.422118Z","iopub.execute_input":"2025-04-21T15:05:37.422472Z","iopub.status.idle":"2025-04-21T15:05:37.433691Z","shell.execute_reply.started":"2025-04-21T15:05:37.422442Z","shell.execute_reply":"2025-04-21T15:05:37.432427Z"}},"outputs":[{"name":"stdout","text":"['Single' 'Widowed' 'Married']\n","output_type":"stream"}],"execution_count":32},{"cell_type":"code","source":"datos = pd.get_dummies(datos, columns=['Marital Status'], drop_first=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.434540Z","iopub.execute_input":"2025-04-21T15:05:37.434822Z","iopub.status.idle":"2025-04-21T15:05:37.485960Z","shell.execute_reply.started":"2025-04-21T15:05:37.434799Z","shell.execute_reply":"2025-04-21T15:05:37.484808Z"}},"outputs":[],"execution_count":33},{"cell_type":"markdown","source":"## Genetic Risk Factor (APOE-ε4 allele)","metadata":{}},{"cell_type":"code","source":"print(datos[\"Genetic Risk Factor (APOE-ε4 allele)\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.487188Z","iopub.execute_input":"2025-04-21T15:05:37.487557Z","iopub.status.idle":"2025-04-21T15:05:37.497346Z","shell.execute_reply.started":"2025-04-21T15:05:37.487525Z","shell.execute_reply":"2025-04-21T15:05:37.496065Z"}},"outputs":[{"name":"stdout","text":"['No' 'Yes']\n","output_type":"stream"}],"execution_count":34},{"cell_type":"code","source":"datos[\"Genetic Risk Factor (APOE-ε4 allele)\"] = datos[\"Genetic Risk Factor (APOE-ε4 allele)\"].replace({\"No\" : \"0\", \"Yes\" : \"1\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.498553Z","iopub.execute_input":"2025-04-21T15:05:37.498862Z","iopub.status.idle":"2025-04-21T15:05:37.530329Z","shell.execute_reply.started":"2025-04-21T15:05:37.498837Z","shell.execute_reply":"2025-04-21T15:05:37.529031Z"}},"outputs":[],"execution_count":35},{"cell_type":"markdown","source":"## Social Engagement Level","metadata":{}},{"cell_type":"code","source":"print(datos[\"Social Engagement Level\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.531753Z","iopub.execute_input":"2025-04-21T15:05:37.532173Z","iopub.status.idle":"2025-04-21T15:05:37.543885Z","shell.execute_reply.started":"2025-04-21T15:05:37.532131Z","shell.execute_reply":"2025-04-21T15:05:37.542519Z"}},"outputs":[{"name":"stdout","text":"['Low' 'High' 'Medium']\n","output_type":"stream"}],"execution_count":36},{"cell_type":"code","source":"datos[\"Social Engagement Level\"] = datos[\"Social Engagement Level\"].replace({\"Low\" : \"0\", \"Medium\" : \"1\", \"High\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.545414Z","iopub.execute_input":"2025-04-21T15:05:37.545834Z","iopub.status.idle":"2025-04-21T15:05:37.580727Z","shell.execute_reply.started":"2025-04-21T15:05:37.545790Z","shell.execute_reply":"2025-04-21T15:05:37.579692Z"}},"outputs":[],"execution_count":37},{"cell_type":"markdown","source":"## Income Level","metadata":{}},{"cell_type":"code","source":"print(datos[\"Income Level\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.581752Z","iopub.execute_input":"2025-04-21T15:05:37.582020Z","iopub.status.idle":"2025-04-21T15:05:37.592295Z","shell.execute_reply.started":"2025-04-21T15:05:37.581998Z","shell.execute_reply":"2025-04-21T15:05:37.590946Z"}},"outputs":[{"name":"stdout","text":"['Medium' 'Low' 'High']\n","output_type":"stream"}],"execution_count":38},{"cell_type":"code","source":"datos[\"Income Level\"] = datos[\"Income Level\"].replace({\"Low\" : \"0\", \"Medium\" : \"1\", \"High\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.593580Z","iopub.execute_input":"2025-04-21T15:05:37.593975Z","iopub.status.idle":"2025-04-21T15:05:37.622652Z","shell.execute_reply.started":"2025-04-21T15:05:37.593934Z","shell.execute_reply":"2025-04-21T15:05:37.621394Z"}},"outputs":[],"execution_count":39},{"cell_type":"markdown","source":"## Stress Levels","metadata":{}},{"cell_type":"code","source":"print(datos[\"Stress Levels\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.623770Z","iopub.execute_input":"2025-04-21T15:05:37.624130Z","iopub.status.idle":"2025-04-21T15:05:37.634681Z","shell.execute_reply.started":"2025-04-21T15:05:37.624092Z","shell.execute_reply":"2025-04-21T15:05:37.633456Z"}},"outputs":[{"name":"stdout","text":"['High' 'Low' 'Medium']\n","output_type":"stream"}],"execution_count":40},{"cell_type":"code","source":"datos[\"Stress Levels\"] = datos[\"Stress Levels\"].replace({\"Low\" : \"0\", \"Medium\" : \"1\", \"High\" : \"2\" })","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.636054Z","iopub.execute_input":"2025-04-21T15:05:37.636435Z","iopub.status.idle":"2025-04-21T15:05:37.670939Z","shell.execute_reply.started":"2025-04-21T15:05:37.636383Z","shell.execute_reply":"2025-04-21T15:05:37.669613Z"}},"outputs":[],"execution_count":41},{"cell_type":"markdown","source":"## Urban vs Rural Living","metadata":{}},{"cell_type":"code","source":"print(datos[\"Urban vs Rural Living\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.672669Z","iopub.execute_input":"2025-04-21T15:05:37.672980Z","iopub.status.idle":"2025-04-21T15:05:37.682903Z","shell.execute_reply.started":"2025-04-21T15:05:37.672951Z","shell.execute_reply":"2025-04-21T15:05:37.681688Z"}},"outputs":[{"name":"stdout","text":"['Urban' 'Rural']\n","output_type":"stream"}],"execution_count":42},{"cell_type":"code","source":"datos = pd.get_dummies(datos, columns=['Urban vs Rural Living'], drop_first=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.684035Z","iopub.execute_input":"2025-04-21T15:05:37.684406Z","iopub.status.idle":"2025-04-21T15:05:37.750429Z","shell.execute_reply.started":"2025-04-21T15:05:37.684377Z","shell.execute_reply":"2025-04-21T15:05:37.749139Z"}},"outputs":[],"execution_count":43},{"cell_type":"markdown","source":"## Alzheimer’s Diagnosis","metadata":{}},{"cell_type":"code","source":"print(datos[\"Alzheimer’s Diagnosis\"].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.751458Z","iopub.execute_input":"2025-04-21T15:05:37.751750Z","iopub.status.idle":"2025-04-21T15:05:37.761138Z","shell.execute_reply.started":"2025-04-21T15:05:37.751724Z","shell.execute_reply":"2025-04-21T15:05:37.760077Z"}},"outputs":[{"name":"stdout","text":"['No' 'Yes']\n","output_type":"stream"}],"execution_count":44},{"cell_type":"code","source":"datos[\"Alzheimer’s Diagnosis\"] = datos[\"Alzheimer’s Diagnosis\"].replace({\"No\" : \"0\", \"Yes\" : \"1\"})","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.762496Z","iopub.execute_input":"2025-04-21T15:05:37.762886Z","iopub.status.idle":"2025-04-21T15:05:37.788800Z","shell.execute_reply.started":"2025-04-21T15:05:37.762848Z","shell.execute_reply":"2025-04-21T15:05:37.787612Z"}},"outputs":[],"execution_count":45},{"cell_type":"markdown","source":"## Normalizar tipo de columna","metadata":{}},{"cell_type":"code","source":"for columna in datos.columns:\n    datos[columna] = datos[columna].astype(float)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.789940Z","iopub.execute_input":"2025-04-21T15:05:37.790319Z","iopub.status.idle":"2025-04-21T15:05:37.948298Z","shell.execute_reply.started":"2025-04-21T15:05:37.790249Z","shell.execute_reply":"2025-04-21T15:05:37.947219Z"}},"outputs":[],"execution_count":46},{"cell_type":"markdown","source":"# Train model","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\n\nX = datos.drop(columns = [\"Alzheimer’s Diagnosis\"])\ny = datos[\"Alzheimer’s Diagnosis\"]\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 42) ","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:37.949246Z","iopub.execute_input":"2025-04-21T15:05:37.949582Z","iopub.status.idle":"2025-04-21T15:05:38.059505Z","shell.execute_reply.started":"2025-04-21T15:05:37.949555Z","shell.execute_reply":"2025-04-21T15:05:38.058406Z"}},"outputs":[],"execution_count":47},{"cell_type":"markdown","source":"# Eliminar espacios","metadata":{}},{"cell_type":"code","source":"datos.columns = datos.columns.str.replace(' ', '_')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:38.060365Z","iopub.execute_input":"2025-04-21T15:05:38.060745Z","iopub.status.idle":"2025-04-21T15:05:38.065810Z","shell.execute_reply.started":"2025-04-21T15:05:38.060710Z","shell.execute_reply":"2025-04-21T15:05:38.064592Z"}},"outputs":[],"execution_count":48},{"cell_type":"markdown","source":"## LogisticRegression","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score\n\n\"\"\"\nparam_grid = {\n    'penalty': ['l1', 'l2'],\n    'C':[0.01, 0.1, 1, 10, 100],\n    'solver':['liblinear', 'saga'],\n    'max_iter':[1000, 2000, 3000],\n}\nlogreg_grid = GridSearchCV(LogisticRegression(), param_grid=param_grid, cv=3, verbose=1, n_jobs=-1)\nlogreg_grid.fit(X_train, y_train)\nypred = logreg_grid.best_estimator_.predict(X_test)\n\n\naccuracy = accuracy_score(y_test, ypred)\nprint(f'Accuracy: {accuracy:.4f}')\n\nprint(\"Best Parameters:\", logreg_grid.best_params_)\n\"\"\"\n\nmodelo = LogisticRegression()\nmodelo.fit(X_train, y_train)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:38.067017Z","iopub.execute_input":"2025-04-21T15:05:38.067439Z","iopub.status.idle":"2025-04-21T15:05:38.728103Z","shell.execute_reply.started":"2025-04-21T15:05:38.067401Z","shell.execute_reply":"2025-04-21T15:05:38.726714Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\nSTOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n\nIncrease the number of iterations (max_iter) or scale the data as shown in:\n    https://scikit-learn.org/stable/modules/preprocessing.html\nPlease also refer to the documentation for alternative solver options:\n    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n  n_iter_i = _check_optimize_result(\n","output_type":"stream"},{"execution_count":49,"output_type":"execute_result","data":{"text/plain":"LogisticRegression()","text/html":"<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":49},{"cell_type":"code","source":"from sklearn.linear_model import LogisticRegression\n\nmodelo = LogisticRegression(max_iter=500)\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:38.729352Z","iopub.execute_input":"2025-04-21T15:05:38.729754Z","iopub.status.idle":"2025-04-21T15:05:40.425878Z","shell.execute_reply.started":"2025-04-21T15:05:38.729716Z","shell.execute_reply":"2025-04-21T15:05:40.424642Z"}},"outputs":[{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"LogisticRegression(max_iter=500)","text/html":"<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression(max_iter=500)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression(max_iter=500)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":50},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:40.426967Z","iopub.execute_input":"2025-04-21T15:05:40.427414Z","iopub.status.idle":"2025-04-21T15:05:40.440480Z","shell.execute_reply.started":"2025-04-21T15:05:40.427373Z","shell.execute_reply":"2025-04-21T15:05:40.438894Z"}},"outputs":[],"execution_count":51},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\naccuracy = accuracy_score(y_test, ypred)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:40.441617Z","iopub.execute_input":"2025-04-21T15:05:40.441927Z","iopub.status.idle":"2025-04-21T15:05:40.502046Z","shell.execute_reply.started":"2025-04-21T15:05:40.441902Z","shell.execute_reply":"2025-04-21T15:05:40.500786Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7146\nrecall: 0.6003\n[[10389  2676]\n [ 3685  5535]]\n","output_type":"stream"}],"execution_count":52},{"cell_type":"markdown","source":"## Decision Tree Classifier","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeClassifier\n\nmodelo = DecisionTreeClassifier()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:40.503420Z","iopub.execute_input":"2025-04-21T15:05:40.503807Z","iopub.status.idle":"2025-04-21T15:05:41.289698Z","shell.execute_reply.started":"2025-04-21T15:05:40.503769Z","shell.execute_reply":"2025-04-21T15:05:41.288290Z"}},"outputs":[{"execution_count":53,"output_type":"execute_result","data":{"text/plain":"DecisionTreeClassifier()","text/html":"<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":53},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:41.290867Z","iopub.execute_input":"2025-04-21T15:05:41.291218Z","iopub.status.idle":"2025-04-21T15:05:41.312954Z","shell.execute_reply.started":"2025-04-21T15:05:41.291186Z","shell.execute_reply":"2025-04-21T15:05:41.312052Z"}},"outputs":[],"execution_count":54},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\naccuracy = accuracy_score(y_test, ypred)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:41.313927Z","iopub.execute_input":"2025-04-21T15:05:41.314204Z","iopub.status.idle":"2025-04-21T15:05:41.378167Z","shell.execute_reply.started":"2025-04-21T15:05:41.314180Z","shell.execute_reply":"2025-04-21T15:05:41.377111Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.6370\nrecall: 0.5616\n[[9018 4047]\n [4042 5178]]\n","output_type":"stream"}],"execution_count":55},{"cell_type":"markdown","source":"## Random Forest Classifier","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestClassifier\n\nmodelo = RandomForestClassifier()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:41.379425Z","iopub.execute_input":"2025-04-21T15:05:41.379757Z","iopub.status.idle":"2025-04-21T15:05:51.796292Z","shell.execute_reply.started":"2025-04-21T15:05:41.379715Z","shell.execute_reply":"2025-04-21T15:05:51.794849Z"}},"outputs":[{"execution_count":56,"output_type":"execute_result","data":{"text/plain":"RandomForestClassifier()","text/html":"<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":56},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:51.797743Z","iopub.execute_input":"2025-04-21T15:05:51.798174Z","iopub.status.idle":"2025-04-21T15:05:52.653354Z","shell.execute_reply.started":"2025-04-21T15:05:51.798131Z","shell.execute_reply":"2025-04-21T15:05:52.652010Z"}},"outputs":[],"execution_count":57},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\naccuracy = accuracy_score(y_test, ypred)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:52.654743Z","iopub.execute_input":"2025-04-21T15:05:52.655299Z","iopub.status.idle":"2025-04-21T15:05:52.709482Z","shell.execute_reply.started":"2025-04-21T15:05:52.655227Z","shell.execute_reply":"2025-04-21T15:05:52.708054Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7212\nrecall: 0.6273\n[[10288  2777]\n [ 3436  5784]]\n","output_type":"stream"}],"execution_count":58},{"cell_type":"markdown","source":"## LGBMRegressor","metadata":{}},{"cell_type":"code","source":"from lightgbm import LGBMRegressor\n\nmodelo = LGBMRegressor()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:52.710679Z","iopub.execute_input":"2025-04-21T15:05:52.711046Z","iopub.status.idle":"2025-04-21T15:05:56.707465Z","shell.execute_reply.started":"2025-04-21T15:05:52.711016Z","shell.execute_reply":"2025-04-21T15:05:56.706603Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.009903 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 405\n[LightGBM] [Info] Number of data points in the train set: 51998, number of used features: 50\n[LightGBM] [Info] Start training from score 0.413343\n","output_type":"stream"},{"execution_count":59,"output_type":"execute_result","data":{"text/plain":"LGBMRegressor()","text/html":"<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" checked><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMRegressor</label><div class=\"sk-toggleable__content\"><pre>LGBMRegressor()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":59},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:56.708099Z","iopub.execute_input":"2025-04-21T15:05:56.708762Z","iopub.status.idle":"2025-04-21T15:05:56.796949Z","shell.execute_reply.started":"2025-04-21T15:05:56.708729Z","shell.execute_reply":"2025-04-21T15:05:56.795769Z"}},"outputs":[],"execution_count":60},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:56.797884Z","iopub.execute_input":"2025-04-21T15:05:56.798283Z","iopub.status.idle":"2025-04-21T15:05:56.851372Z","shell.execute_reply.started":"2025-04-21T15:05:56.798222Z","shell.execute_reply":"2025-04-21T15:05:56.850051Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7266\nrecall: 0.6852\n[[9875 3190]\n [2902 6318]]\n","output_type":"stream"}],"execution_count":61},{"cell_type":"markdown","source":"## XGBRegressor","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBRegressor\n\nmodelo = XGBRegressor()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:56.852491Z","iopub.execute_input":"2025-04-21T15:05:56.852862Z","iopub.status.idle":"2025-04-21T15:05:58.016186Z","shell.execute_reply.started":"2025-04-21T15:05:56.852827Z","shell.execute_reply":"2025-04-21T15:05:58.014390Z"}},"outputs":[{"execution_count":62,"output_type":"execute_result","data":{"text/plain":"XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=None, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=None, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=None, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-6 {color: black;background-color: white;}#sk-container-id-6 pre{padding: 0;}#sk-container-id-6 div.sk-toggleable {background-color: white;}#sk-container-id-6 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-6 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-6 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-6 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-6 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-6 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-6 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-6 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-6 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-6 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-6 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-6 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-6 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-6 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-6 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-6 div.sk-item {position: relative;z-index: 1;}#sk-container-id-6 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-6 div.sk-item::before, #sk-container-id-6 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-6 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-6 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-6 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-6 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-6 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-6 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-6 div.sk-label-container {text-align: center;}#sk-container-id-6 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-6 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-6\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=None, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=None, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=None, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" checked><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBRegressor</label><div class=\"sk-toggleable__content\"><pre>XGBRegressor(base_score=None, booster=None, callbacks=None,\n             colsample_bylevel=None, colsample_bynode=None,\n             colsample_bytree=None, device=None, early_stopping_rounds=None,\n             enable_categorical=False, eval_metric=None, feature_types=None,\n             gamma=None, grow_policy=None, importance_type=None,\n             interaction_constraints=None, learning_rate=None, max_bin=None,\n             max_cat_threshold=None, max_cat_to_onehot=None,\n             max_delta_step=None, max_depth=None, max_leaves=None,\n             min_child_weight=None, missing=nan, monotone_constraints=None,\n             multi_strategy=None, n_estimators=None, n_jobs=None,\n             num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":62},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:58.016905Z","iopub.execute_input":"2025-04-21T15:05:58.017196Z","iopub.status.idle":"2025-04-21T15:05:58.068291Z","shell.execute_reply.started":"2025-04-21T15:05:58.017170Z","shell.execute_reply":"2025-04-21T15:05:58.067414Z"}},"outputs":[],"execution_count":63},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:58.068924Z","iopub.execute_input":"2025-04-21T15:05:58.069179Z","iopub.status.idle":"2025-04-21T15:05:58.131642Z","shell.execute_reply.started":"2025-04-21T15:05:58.069156Z","shell.execute_reply":"2025-04-21T15:05:58.130213Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7180\nrecall: 0.6411\n[[10089  2976]\n [ 3309  5911]]\n","output_type":"stream"}],"execution_count":64},{"cell_type":"markdown","source":"## SVR","metadata":{}},{"cell_type":"code","source":"from sklearn.svm import SVR\n\nmodelo = SVR()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:05:58.133048Z","iopub.execute_input":"2025-04-21T15:05:58.133377Z","iopub.status.idle":"2025-04-21T15:08:54.752550Z","shell.execute_reply.started":"2025-04-21T15:05:58.133349Z","shell.execute_reply":"2025-04-21T15:08:54.751088Z"}},"outputs":[{"execution_count":65,"output_type":"execute_result","data":{"text/plain":"SVR()","text/html":"<style>#sk-container-id-7 {color: black;background-color: white;}#sk-container-id-7 pre{padding: 0;}#sk-container-id-7 div.sk-toggleable {background-color: white;}#sk-container-id-7 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-7 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-7 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-7 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-7 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-7 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-7 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-7 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-7 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-7 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-7 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-7 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-7 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-7 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-7 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-7 div.sk-item {position: relative;z-index: 1;}#sk-container-id-7 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-7 div.sk-item::before, #sk-container-id-7 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-7 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-7 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-7 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-7 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-7 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-7 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-7 div.sk-label-container {text-align: center;}#sk-container-id-7 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-7 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-7\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVR()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" checked><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SVR</label><div class=\"sk-toggleable__content\"><pre>SVR()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":65},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:08:54.753603Z","iopub.execute_input":"2025-04-21T15:08:54.753889Z","iopub.status.idle":"2025-04-21T15:10:06.171717Z","shell.execute_reply.started":"2025-04-21T15:08:54.753866Z","shell.execute_reply":"2025-04-21T15:10:06.170572Z"}},"outputs":[],"execution_count":66},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:06.172829Z","iopub.execute_input":"2025-04-21T15:10:06.173203Z","iopub.status.idle":"2025-04-21T15:10:06.221457Z","shell.execute_reply.started":"2025-04-21T15:10:06.173165Z","shell.execute_reply":"2025-04-21T15:10:06.220236Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7179\nrecall: 0.6155\n[[10323  2742]\n [ 3545  5675]]\n","output_type":"stream"}],"execution_count":67},{"cell_type":"markdown","source":"## Gradient Boosting Regressor","metadata":{}},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.model_selection import GridSearchCV\nfrom sklearn.metrics import accuracy_score, recall_score, ConfusionMatrixDisplay\nimport matplotlib.pyplot as plt\n\ngbr = GradientBoostingRegressor(\n    learning_rate=0.03,          # Tasa de aprendizaje\n    n_estimators=100,            # Número de árboles\n    max_depth=3,                 # Profundidad máxima de los árboles\n    alpha=0.90,                  # Parámetro de la cuantía para la pérdida de desviación\n    tol=1e-4,                    # Tolerancia para la parada anticipada\n)\n\ngbr.fit(X_train, y_train)\ny_pred = gbr.predict(X_test)\n\n\nypred_classes = (y_pred >= 0.5).astype(int) # Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))\n\ndisp = ConfusionMatrixDisplay.from_predictions(y_test, ypred_classes)\ndisp.ax_.set_title('Confusion Matrix')\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:06.222706Z","iopub.execute_input":"2025-04-21T15:10:06.223131Z","iopub.status.idle":"2025-04-21T15:10:17.704526Z","shell.execute_reply.started":"2025-04-21T15:10:06.223090Z","shell.execute_reply":"2025-04-21T15:10:17.703297Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7285\nrecall: 0.7285\n[[9517 3548]\n [2503 6717]]\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 2 Axes>","image/png":"\n"},"metadata":{}}],"execution_count":68},{"cell_type":"code","source":"from sklearn.ensemble import GradientBoostingRegressor\n\nmodelo = GradientBoostingRegressor()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:17.705653Z","iopub.execute_input":"2025-04-21T15:10:17.706010Z","iopub.status.idle":"2025-04-21T15:10:28.463099Z","shell.execute_reply.started":"2025-04-21T15:10:17.705968Z","shell.execute_reply":"2025-04-21T15:10:28.461702Z"}},"outputs":[{"execution_count":69,"output_type":"execute_result","data":{"text/plain":"GradientBoostingRegressor()","text/html":"<style>#sk-container-id-8 {color: black;background-color: white;}#sk-container-id-8 pre{padding: 0;}#sk-container-id-8 div.sk-toggleable {background-color: white;}#sk-container-id-8 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-8 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-8 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-8 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-8 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-8 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-8 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-8 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-8 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-8 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-8 div.sk-item {position: relative;z-index: 1;}#sk-container-id-8 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-8 div.sk-item::before, #sk-container-id-8 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-8 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-8 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-8 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-8 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-8 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-8 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-8 div.sk-label-container {text-align: center;}#sk-container-id-8 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-8 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GradientBoostingRegressor()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GradientBoostingRegressor</label><div class=\"sk-toggleable__content\"><pre>GradientBoostingRegressor()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":69},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:28.464549Z","iopub.execute_input":"2025-04-21T15:10:28.464871Z","iopub.status.idle":"2025-04-21T15:10:28.522645Z","shell.execute_reply.started":"2025-04-21T15:10:28.464844Z","shell.execute_reply":"2025-04-21T15:10:28.521626Z"}},"outputs":[],"execution_count":70},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:28.523492Z","iopub.execute_input":"2025-04-21T15:10:28.523748Z","iopub.status.idle":"2025-04-21T15:10:28.575709Z","shell.execute_reply.started":"2025-04-21T15:10:28.523727Z","shell.execute_reply":"2025-04-21T15:10:28.574467Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7283\nrecall: 0.6915\n[[9855 3210]\n [2844 6376]]\n","output_type":"stream"}],"execution_count":71},{"cell_type":"markdown","source":"## XGBClassifier","metadata":{}},{"cell_type":"code","source":"from xgboost import XGBClassifier\n\nmodelo = XGBClassifier()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:28.576784Z","iopub.execute_input":"2025-04-21T15:10:28.577070Z","iopub.status.idle":"2025-04-21T15:10:29.207880Z","shell.execute_reply.started":"2025-04-21T15:10:28.577045Z","shell.execute_reply":"2025-04-21T15:10:29.206963Z"}},"outputs":[{"execution_count":72,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-9 {color: black;background-color: white;}#sk-container-id-9 pre{padding: 0;}#sk-container-id-9 div.sk-toggleable {background-color: white;}#sk-container-id-9 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-9 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-9 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-9 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-9 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-9 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-9 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-9 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-9 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-9 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-9 div.sk-item {position: relative;z-index: 1;}#sk-container-id-9 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-9 div.sk-item::before, #sk-container-id-9 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-9 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-9 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-9 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-9 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-9 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-9 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-9 div.sk-label-container {text-align: center;}#sk-container-id-9 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-9 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":72},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:29.208833Z","iopub.execute_input":"2025-04-21T15:10:29.209131Z","iopub.status.idle":"2025-04-21T15:10:29.256742Z","shell.execute_reply.started":"2025-04-21T15:10:29.209105Z","shell.execute_reply":"2025-04-21T15:10:29.255921Z"}},"outputs":[],"execution_count":73},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:29.257383Z","iopub.execute_input":"2025-04-21T15:10:29.257649Z","iopub.status.idle":"2025-04-21T15:10:29.313239Z","shell.execute_reply.started":"2025-04-21T15:10:29.257625Z","shell.execute_reply":"2025-04-21T15:10:29.311689Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7119\nrecall: 0.6393\n[[9970 3095]\n [3326 5894]]\n","output_type":"stream"}],"execution_count":74},{"cell_type":"markdown","source":"## SVC","metadata":{}},{"cell_type":"code","source":"\"\"\"\nfrom sklearn.svm import SVC\n\nmodelo = SVC()\nmodelo.fit(X_train, y_train)\n\"\"\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:29.314351Z","iopub.execute_input":"2025-04-21T15:10:29.314811Z","iopub.status.idle":"2025-04-21T15:10:29.322418Z","shell.execute_reply.started":"2025-04-21T15:10:29.314777Z","shell.execute_reply":"2025-04-21T15:10:29.320930Z"}},"outputs":[{"execution_count":75,"output_type":"execute_result","data":{"text/plain":"'\\nfrom sklearn.svm import SVC\\n\\nmodelo = SVC()\\nmodelo.fit(X_train, y_train)\\n'"},"metadata":{}}],"execution_count":75},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"# ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:29.324317Z","iopub.execute_input":"2025-04-21T15:10:29.324880Z","iopub.status.idle":"2025-04-21T15:10:29.343832Z","shell.execute_reply.started":"2025-04-21T15:10:29.324842Z","shell.execute_reply":"2025-04-21T15:10:29.342676Z"}},"outputs":[],"execution_count":76},{"cell_type":"code","source":"\"\"\"\nfrom sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))\n\"\"\"","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:29.345086Z","iopub.execute_input":"2025-04-21T15:10:29.345435Z","iopub.status.idle":"2025-04-21T15:10:29.371324Z","shell.execute_reply.started":"2025-04-21T15:10:29.345405Z","shell.execute_reply":"2025-04-21T15:10:29.369988Z"}},"outputs":[{"execution_count":77,"output_type":"execute_result","data":{"text/plain":"\"\\nfrom sklearn.metrics import accuracy_score\\nfrom sklearn.metrics import recall_score\\nfrom sklearn.metrics import confusion_matrix\\n\\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\\n\\naccuracy = accuracy_score(y_test, ypred_classes)\\nprint(f'Accuracy: {accuracy:.4f}')\\nrecall = recall_score(y_test, ypred_classes)\\nprint(f'recall: {recall:.4f}')\\nprint(confusion_matrix(y_test, ypred_classes))\\n\""},"metadata":{}}],"execution_count":77},{"cell_type":"markdown","source":"## LightGBM","metadata":{}},{"cell_type":"code","source":"import lightgbm as lgb\nfrom sklearn.model_selection import train_test_split\n\nmodelo = lgb.LGBMClassifier()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:29.372524Z","iopub.execute_input":"2025-04-21T15:10:29.372839Z","iopub.status.idle":"2025-04-21T15:10:29.947603Z","shell.execute_reply.started":"2025-04-21T15:10:29.372811Z","shell.execute_reply":"2025-04-21T15:10:29.946387Z"}},"outputs":[{"name":"stdout","text":"[LightGBM] [Warning] Found whitespace in feature_names, replace with underlines\n[LightGBM] [Info] Number of positive: 21493, number of negative: 30505\n[LightGBM] [Info] Auto-choosing row-wise multi-threading, the overhead of testing was 0.005872 seconds.\nYou can set `force_row_wise=true` to remove the overhead.\nAnd if memory is not enough, you can set `force_col_wise=true`.\n[LightGBM] [Info] Total Bins 405\n[LightGBM] [Info] Number of data points in the train set: 51998, number of used features: 50\n[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.413343 -> initscore=-0.350163\n[LightGBM] [Info] Start training from score -0.350163\n","output_type":"stream"},{"execution_count":78,"output_type":"execute_result","data":{"text/plain":"LGBMClassifier()","text/html":"<style>#sk-container-id-10 {color: black;background-color: white;}#sk-container-id-10 pre{padding: 0;}#sk-container-id-10 div.sk-toggleable {background-color: white;}#sk-container-id-10 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-10 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-10 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-10 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-10 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-10 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-10 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-10 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-10 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-10 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-10 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-10 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-10 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-10 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-10 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-10 div.sk-item {position: relative;z-index: 1;}#sk-container-id-10 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-10 div.sk-item::before, #sk-container-id-10 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-10 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-10 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-10 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-10 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-10 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-10 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-10 div.sk-label-container {text-align: center;}#sk-container-id-10 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-10 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-10\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LGBMClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-10\" type=\"checkbox\" checked><label for=\"sk-estimator-id-10\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LGBMClassifier</label><div class=\"sk-toggleable__content\"><pre>LGBMClassifier()</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":78},{"cell_type":"markdown","source":"### Obtain predictions\n","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:29.948877Z","iopub.execute_input":"2025-04-21T15:10:29.949260Z","iopub.status.idle":"2025-04-21T15:10:30.023882Z","shell.execute_reply.started":"2025-04-21T15:10:29.949215Z","shell.execute_reply":"2025-04-21T15:10:30.022711Z"}},"outputs":[],"execution_count":79},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:30.024990Z","iopub.execute_input":"2025-04-21T15:10:30.025685Z","iopub.status.idle":"2025-04-21T15:10:30.076581Z","shell.execute_reply.started":"2025-04-21T15:10:30.025552Z","shell.execute_reply":"2025-04-21T15:10:30.075326Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7279\nrecall: 0.6911\n[[9849 3216]\n [2848 6372]]\n","output_type":"stream"}],"execution_count":80},{"cell_type":"markdown","source":"## XGBoost","metadata":{}},{"cell_type":"code","source":"import xgboost as xgb\nfrom sklearn.model_selection import train_test_split\n\nmodelo = xgb.XGBClassifier()\nmodelo.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:30.077705Z","iopub.execute_input":"2025-04-21T15:10:30.077992Z","iopub.status.idle":"2025-04-21T15:10:30.724304Z","shell.execute_reply.started":"2025-04-21T15:10:30.077968Z","shell.execute_reply":"2025-04-21T15:10:30.723081Z"}},"outputs":[{"execution_count":81,"output_type":"execute_result","data":{"text/plain":"XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)","text/html":"<style>#sk-container-id-11 {color: black;background-color: white;}#sk-container-id-11 pre{padding: 0;}#sk-container-id-11 div.sk-toggleable {background-color: white;}#sk-container-id-11 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-11 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-11 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-11 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-11 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-11 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-11 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-11 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-11 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-11 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-11 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-11 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-11 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-11 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-11 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-11 div.sk-item {position: relative;z-index: 1;}#sk-container-id-11 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-11 div.sk-item::before, #sk-container-id-11 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-11 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-11 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-11 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-11 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-11 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-11 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-11 div.sk-label-container {text-align: center;}#sk-container-id-11 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-11 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-11\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-11\" type=\"checkbox\" checked><label for=\"sk-estimator-id-11\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">XGBClassifier</label><div class=\"sk-toggleable__content\"><pre>XGBClassifier(base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=None, device=None, early_stopping_rounds=None,\n              enable_categorical=False, eval_metric=None, feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, learning_rate=None, max_bin=None,\n              max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=None, max_leaves=None,\n              min_child_weight=None, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=None, n_jobs=None,\n              num_parallel_tree=None, random_state=None, ...)</pre></div></div></div></div></div>"},"metadata":{}}],"execution_count":81},{"cell_type":"markdown","source":"### Obtain predictions","metadata":{}},{"cell_type":"code","source":"ypred = modelo.predict(X_test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:30.733688Z","iopub.execute_input":"2025-04-21T15:10:30.734059Z","iopub.status.idle":"2025-04-21T15:10:30.781014Z","shell.execute_reply.started":"2025-04-21T15:10:30.734031Z","shell.execute_reply":"2025-04-21T15:10:30.779782Z"}},"outputs":[],"execution_count":82},{"cell_type":"code","source":"from sklearn.metrics import accuracy_score\nfrom sklearn.metrics import recall_score\nfrom sklearn.metrics import confusion_matrix\n\nypred_classes = (ypred >= 0.5).astype(int) ## Pasar a enteros los resultados\n\naccuracy = accuracy_score(y_test, ypred_classes)\nprint(f'Accuracy: {accuracy:.4f}')\nrecall = recall_score(y_test, ypred_classes)\nprint(f'recall: {recall:.4f}')\nprint(confusion_matrix(y_test, ypred_classes))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-04-21T15:10:30.781919Z","iopub.execute_input":"2025-04-21T15:10:30.782352Z","iopub.status.idle":"2025-04-21T15:10:30.837415Z","shell.execute_reply.started":"2025-04-21T15:10:30.782319Z","shell.execute_reply":"2025-04-21T15:10:30.835935Z"}},"outputs":[{"name":"stdout","text":"Accuracy: 0.7119\nrecall: 0.6393\n[[9970 3095]\n [3326 5894]]\n","output_type":"stream"}],"execution_count":83}]}
